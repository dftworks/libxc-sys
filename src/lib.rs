/* automatically generated by rust-bindgen */

pub const XC_VERSION: &'static [u8; 6usize] = b"5.0.0\0";
pub const XC_MAJOR_VERSION: u32 = 5;
pub const XC_MINOR_VERSION: u32 = 0;
pub const XC_UNPOLARIZED: u32 = 1;
pub const XC_POLARIZED: u32 = 2;
pub const XC_NON_RELATIVISTIC: u32 = 0;
pub const XC_RELATIVISTIC: u32 = 1;
pub const XC_EXCHANGE: u32 = 0;
pub const XC_CORRELATION: u32 = 1;
pub const XC_EXCHANGE_CORRELATION: u32 = 2;
pub const XC_KINETIC: u32 = 3;
pub const XC_FAMILY_UNKNOWN: i32 = -1;
pub const XC_FAMILY_LDA: u32 = 1;
pub const XC_FAMILY_GGA: u32 = 2;
pub const XC_FAMILY_MGGA: u32 = 4;
pub const XC_FAMILY_LCA: u32 = 8;
pub const XC_FAMILY_OEP: u32 = 16;
pub const XC_FAMILY_HYB_GGA: u32 = 32;
pub const XC_FAMILY_HYB_MGGA: u32 = 64;
pub const XC_FAMILY_HYB_LDA: u32 = 128;
pub const XC_FLAGS_HAVE_EXC: u32 = 1;
pub const XC_FLAGS_HAVE_VXC: u32 = 2;
pub const XC_FLAGS_HAVE_FXC: u32 = 4;
pub const XC_FLAGS_HAVE_KXC: u32 = 8;
pub const XC_FLAGS_HAVE_LXC: u32 = 16;
pub const XC_FLAGS_1D: u32 = 32;
pub const XC_FLAGS_2D: u32 = 64;
pub const XC_FLAGS_3D: u32 = 128;
pub const XC_FLAGS_HYB_CAM: u32 = 256;
pub const XC_FLAGS_HYB_CAMY: u32 = 512;
pub const XC_FLAGS_VV10: u32 = 1024;
pub const XC_FLAGS_HYB_LC: u32 = 2048;
pub const XC_FLAGS_HYB_LCY: u32 = 4096;
pub const XC_FLAGS_STABLE: u32 = 8192;
pub const XC_FLAGS_DEVELOPMENT: u32 = 16384;
pub const XC_FLAGS_NEEDS_LAPLACIAN: u32 = 32768;
pub const XC_FLAGS_HAVE_ALL: u32 = 31;
pub const XC_EXT_PARAMS_DEFAULT: i32 = -999998888;
pub const XC_TAU_EXPLICIT: u32 = 0;
pub const XC_TAU_EXPANSION: u32 = 1;
pub const XC_MAX_REFERENCES: u32 = 5;
pub const XC_LDA_X: u32 = 1;
pub const XC_LDA_C_WIGNER: u32 = 2;
pub const XC_LDA_C_RPA: u32 = 3;
pub const XC_LDA_C_HL: u32 = 4;
pub const XC_LDA_C_GL: u32 = 5;
pub const XC_LDA_C_XALPHA: u32 = 6;
pub const XC_LDA_C_VWN: u32 = 7;
pub const XC_LDA_C_VWN_RPA: u32 = 8;
pub const XC_LDA_C_PZ: u32 = 9;
pub const XC_LDA_C_PZ_MOD: u32 = 10;
pub const XC_LDA_C_OB_PZ: u32 = 11;
pub const XC_LDA_C_PW: u32 = 12;
pub const XC_LDA_C_PW_MOD: u32 = 13;
pub const XC_LDA_C_OB_PW: u32 = 14;
pub const XC_LDA_C_2D_AMGB: u32 = 15;
pub const XC_LDA_C_2D_PRM: u32 = 16;
pub const XC_LDA_C_VBH: u32 = 17;
pub const XC_LDA_C_1D_CSC: u32 = 18;
pub const XC_LDA_X_2D: u32 = 19;
pub const XC_LDA_XC_TETER93: u32 = 20;
pub const XC_LDA_X_1D_SOFT: u32 = 21;
pub const XC_LDA_C_ML1: u32 = 22;
pub const XC_LDA_C_ML2: u32 = 23;
pub const XC_LDA_C_GOMBAS: u32 = 24;
pub const XC_LDA_C_PW_RPA: u32 = 25;
pub const XC_LDA_C_1D_LOOS: u32 = 26;
pub const XC_LDA_C_RC04: u32 = 27;
pub const XC_LDA_C_VWN_1: u32 = 28;
pub const XC_LDA_C_VWN_2: u32 = 29;
pub const XC_LDA_C_VWN_3: u32 = 30;
pub const XC_LDA_C_VWN_4: u32 = 31;
pub const XC_LDA_XC_ZLP: u32 = 43;
pub const XC_LDA_K_TF: u32 = 50;
pub const XC_LDA_K_LP: u32 = 51;
pub const XC_LDA_XC_KSDT: u32 = 259;
pub const XC_LDA_C_CHACHIYO: u32 = 287;
pub const XC_LDA_C_LP96: u32 = 289;
pub const XC_LDA_C_CHACHIYO_MOD: u32 = 307;
pub const XC_LDA_C_KARASIEV_MOD: u32 = 308;
pub const XC_LDA_X_REL: u32 = 532;
pub const XC_LDA_XC_1D_EHWLRG_1: u32 = 536;
pub const XC_LDA_XC_1D_EHWLRG_2: u32 = 537;
pub const XC_LDA_XC_1D_EHWLRG_3: u32 = 538;
pub const XC_LDA_X_ERF: u32 = 546;
pub const XC_LDA_XC_LP_A: u32 = 547;
pub const XC_LDA_XC_LP_B: u32 = 548;
pub const XC_LDA_X_RAE: u32 = 549;
pub const XC_LDA_K_ZLP: u32 = 550;
pub const XC_LDA_C_MCWEENY: u32 = 551;
pub const XC_LDA_C_BR78: u32 = 552;
pub const XC_LDA_C_PK09: u32 = 554;
pub const XC_LDA_C_OW_LYP: u32 = 573;
pub const XC_LDA_C_OW: u32 = 574;
pub const XC_LDA_XC_GDSMFB: u32 = 577;
pub const XC_LDA_C_GK72: u32 = 578;
pub const XC_LDA_C_KARASIEV: u32 = 579;
pub const XC_LDA_K_LP96: u32 = 580;
pub const XC_LDA_XC_BN05: u32 = 588;
pub const XC_LDA_C_PMGB06: u32 = 590;
pub const XC_LDA_XC_TIH: u32 = 599;
pub const XC_LDA_X_1D_EXPONENTIAL: u32 = 600;
pub const XC_LDA_C_UPW92: u32 = 683;
pub const XC_LDA_C_RPW92: u32 = 684;
pub const XC_LDA_X_SLOC: u32 = 692;
pub const XC_HYB_LDA_XC_LDA0: u32 = 177;
pub const XC_HYB_LDA_XC_CAM_LDA0: u32 = 178;
pub const XC_GGA_X_GAM: u32 = 32;
pub const XC_GGA_C_GAM: u32 = 33;
pub const XC_GGA_X_HCTH_A: u32 = 34;
pub const XC_GGA_X_EV93: u32 = 35;
pub const XC_GGA_X_BCGP: u32 = 38;
pub const XC_GGA_C_ACGGA: u32 = 39;
pub const XC_GGA_X_LAMBDA_OC2_N: u32 = 40;
pub const XC_GGA_X_B86_R: u32 = 41;
pub const XC_GGA_X_LAMBDA_CH_N: u32 = 44;
pub const XC_GGA_X_LAMBDA_LO_N: u32 = 45;
pub const XC_GGA_X_HJS_B88_V2: u32 = 46;
pub const XC_GGA_C_Q2D: u32 = 47;
pub const XC_GGA_X_Q2D: u32 = 48;
pub const XC_GGA_X_PBE_MOL: u32 = 49;
pub const XC_GGA_K_TFVW: u32 = 52;
pub const XC_GGA_K_REVAPBEINT: u32 = 53;
pub const XC_GGA_K_APBEINT: u32 = 54;
pub const XC_GGA_K_REVAPBE: u32 = 55;
pub const XC_GGA_X_AK13: u32 = 56;
pub const XC_GGA_K_MEYER: u32 = 57;
pub const XC_GGA_X_LV_RPW86: u32 = 58;
pub const XC_GGA_X_PBE_TCA: u32 = 59;
pub const XC_GGA_X_PBEINT: u32 = 60;
pub const XC_GGA_C_ZPBEINT: u32 = 61;
pub const XC_GGA_C_PBEINT: u32 = 62;
pub const XC_GGA_C_ZPBESOL: u32 = 63;
pub const XC_GGA_XC_OPBE_D: u32 = 65;
pub const XC_GGA_XC_OPWLYP_D: u32 = 66;
pub const XC_GGA_XC_OBLYP_D: u32 = 67;
pub const XC_GGA_X_VMT84_GE: u32 = 68;
pub const XC_GGA_X_VMT84_PBE: u32 = 69;
pub const XC_GGA_X_VMT_GE: u32 = 70;
pub const XC_GGA_X_VMT_PBE: u32 = 71;
pub const XC_GGA_C_N12_SX: u32 = 79;
pub const XC_GGA_C_N12: u32 = 80;
pub const XC_GGA_X_N12: u32 = 82;
pub const XC_GGA_C_REGTPSS: u32 = 83;
pub const XC_GGA_C_OP_XALPHA: u32 = 84;
pub const XC_GGA_C_OP_G96: u32 = 85;
pub const XC_GGA_C_OP_PBE: u32 = 86;
pub const XC_GGA_C_OP_B88: u32 = 87;
pub const XC_GGA_C_FT97: u32 = 88;
pub const XC_GGA_C_SPBE: u32 = 89;
pub const XC_GGA_X_SSB_SW: u32 = 90;
pub const XC_GGA_X_SSB: u32 = 91;
pub const XC_GGA_X_SSB_D: u32 = 92;
pub const XC_GGA_XC_HCTH_407P: u32 = 93;
pub const XC_GGA_XC_HCTH_P76: u32 = 94;
pub const XC_GGA_XC_HCTH_P14: u32 = 95;
pub const XC_GGA_XC_B97_GGA1: u32 = 96;
pub const XC_GGA_C_HCTH_A: u32 = 97;
pub const XC_GGA_X_BPCCAC: u32 = 98;
pub const XC_GGA_C_REVTCA: u32 = 99;
pub const XC_GGA_C_TCA: u32 = 100;
pub const XC_GGA_X_PBE: u32 = 101;
pub const XC_GGA_X_PBE_R: u32 = 102;
pub const XC_GGA_X_B86: u32 = 103;
pub const XC_GGA_X_HERMAN: u32 = 104;
pub const XC_GGA_X_B86_MGC: u32 = 105;
pub const XC_GGA_X_B88: u32 = 106;
pub const XC_GGA_X_G96: u32 = 107;
pub const XC_GGA_X_PW86: u32 = 108;
pub const XC_GGA_X_PW91: u32 = 109;
pub const XC_GGA_X_OPTX: u32 = 110;
pub const XC_GGA_X_DK87_R1: u32 = 111;
pub const XC_GGA_X_DK87_R2: u32 = 112;
pub const XC_GGA_X_LG93: u32 = 113;
pub const XC_GGA_X_FT97_A: u32 = 114;
pub const XC_GGA_X_FT97_B: u32 = 115;
pub const XC_GGA_X_PBE_SOL: u32 = 116;
pub const XC_GGA_X_RPBE: u32 = 117;
pub const XC_GGA_X_WC: u32 = 118;
pub const XC_GGA_X_MPW91: u32 = 119;
pub const XC_GGA_X_AM05: u32 = 120;
pub const XC_GGA_X_PBEA: u32 = 121;
pub const XC_GGA_X_MPBE: u32 = 122;
pub const XC_GGA_X_XPBE: u32 = 123;
pub const XC_GGA_X_2D_B86_MGC: u32 = 124;
pub const XC_GGA_X_BAYESIAN: u32 = 125;
pub const XC_GGA_X_PBE_JSJR: u32 = 126;
pub const XC_GGA_X_2D_B88: u32 = 127;
pub const XC_GGA_X_2D_B86: u32 = 128;
pub const XC_GGA_X_2D_PBE: u32 = 129;
pub const XC_GGA_C_PBE: u32 = 130;
pub const XC_GGA_C_LYP: u32 = 131;
pub const XC_GGA_C_P86: u32 = 132;
pub const XC_GGA_C_PBE_SOL: u32 = 133;
pub const XC_GGA_C_PW91: u32 = 134;
pub const XC_GGA_C_AM05: u32 = 135;
pub const XC_GGA_C_XPBE: u32 = 136;
pub const XC_GGA_C_LM: u32 = 137;
pub const XC_GGA_C_PBE_JRGX: u32 = 138;
pub const XC_GGA_X_OPTB88_VDW: u32 = 139;
pub const XC_GGA_X_PBEK1_VDW: u32 = 140;
pub const XC_GGA_X_OPTPBE_VDW: u32 = 141;
pub const XC_GGA_X_RGE2: u32 = 142;
pub const XC_GGA_C_RGE2: u32 = 143;
pub const XC_GGA_X_RPW86: u32 = 144;
pub const XC_GGA_X_KT1: u32 = 145;
pub const XC_GGA_XC_KT2: u32 = 146;
pub const XC_GGA_C_WL: u32 = 147;
pub const XC_GGA_C_WI: u32 = 148;
pub const XC_GGA_X_MB88: u32 = 149;
pub const XC_GGA_X_SOGGA: u32 = 150;
pub const XC_GGA_X_SOGGA11: u32 = 151;
pub const XC_GGA_C_SOGGA11: u32 = 152;
pub const XC_GGA_C_WI0: u32 = 153;
pub const XC_GGA_XC_TH1: u32 = 154;
pub const XC_GGA_XC_TH2: u32 = 155;
pub const XC_GGA_XC_TH3: u32 = 156;
pub const XC_GGA_XC_TH4: u32 = 157;
pub const XC_GGA_X_C09X: u32 = 158;
pub const XC_GGA_C_SOGGA11_X: u32 = 159;
pub const XC_GGA_X_LB: u32 = 160;
pub const XC_GGA_XC_HCTH_93: u32 = 161;
pub const XC_GGA_XC_HCTH_120: u32 = 162;
pub const XC_GGA_XC_HCTH_147: u32 = 163;
pub const XC_GGA_XC_HCTH_407: u32 = 164;
pub const XC_GGA_XC_EDF1: u32 = 165;
pub const XC_GGA_XC_XLYP: u32 = 166;
pub const XC_GGA_XC_KT1: u32 = 167;
pub const XC_GGA_X_LSPBE: u32 = 168;
pub const XC_GGA_X_LSRPBE: u32 = 169;
pub const XC_GGA_XC_B97_D: u32 = 170;
pub const XC_GGA_X_OPTB86B_VDW: u32 = 171;
pub const XC_GGA_XC_PBE1W: u32 = 173;
pub const XC_GGA_XC_MPWLYP1W: u32 = 174;
pub const XC_GGA_XC_PBELYP1W: u32 = 175;
pub const XC_GGA_C_ACGGAP: u32 = 176;
pub const XC_GGA_X_B88_6311G: u32 = 179;
pub const XC_GGA_X_NCAP: u32 = 180;
pub const XC_GGA_XC_NCAP: u32 = 181;
pub const XC_GGA_X_LBM: u32 = 182;
pub const XC_GGA_X_OL2: u32 = 183;
pub const XC_GGA_X_APBE: u32 = 184;
pub const XC_GGA_K_APBE: u32 = 185;
pub const XC_GGA_C_APBE: u32 = 186;
pub const XC_GGA_K_TW1: u32 = 187;
pub const XC_GGA_K_TW2: u32 = 188;
pub const XC_GGA_K_TW3: u32 = 189;
pub const XC_GGA_K_TW4: u32 = 190;
pub const XC_GGA_X_HTBS: u32 = 191;
pub const XC_GGA_X_AIRY: u32 = 192;
pub const XC_GGA_X_LAG: u32 = 193;
pub const XC_GGA_XC_MOHLYP: u32 = 194;
pub const XC_GGA_XC_MOHLYP2: u32 = 195;
pub const XC_GGA_XC_TH_FL: u32 = 196;
pub const XC_GGA_XC_TH_FC: u32 = 197;
pub const XC_GGA_XC_TH_FCFO: u32 = 198;
pub const XC_GGA_XC_TH_FCO: u32 = 199;
pub const XC_GGA_C_OPTC: u32 = 200;
pub const XC_GGA_X_ECMV92: u32 = 215;
pub const XC_GGA_C_PBE_VWN: u32 = 216;
pub const XC_GGA_C_PBELOC: u32 = 246;
pub const XC_GGA_XC_VV10: u32 = 255;
pub const XC_GGA_C_PBEFE: u32 = 258;
pub const XC_GGA_C_OP_PW91: u32 = 262;
pub const XC_GGA_X_PBEFE: u32 = 265;
pub const XC_GGA_X_CAP: u32 = 270;
pub const XC_GGA_X_EB88: u32 = 271;
pub const XC_GGA_C_PBE_MOL: u32 = 272;
pub const XC_GGA_K_ABSP3: u32 = 277;
pub const XC_GGA_K_ABSP4: u32 = 278;
pub const XC_GGA_C_BMK: u32 = 280;
pub const XC_GGA_C_TAU_HCTH: u32 = 281;
pub const XC_GGA_C_HYB_TAU_HCTH: u32 = 283;
pub const XC_GGA_X_BEEFVDW: u32 = 285;
pub const XC_GGA_XC_BEEFVDW: u32 = 286;
pub const XC_GGA_X_PBETRANS: u32 = 291;
pub const XC_GGA_X_CHACHIYO: u32 = 298;
pub const XC_GGA_C_CHACHIYO: u32 = 309;
pub const XC_GGA_X_S12G: u32 = 495;
pub const XC_GGA_K_VW: u32 = 500;
pub const XC_GGA_K_GE2: u32 = 501;
pub const XC_GGA_K_GOLDEN: u32 = 502;
pub const XC_GGA_K_YT65: u32 = 503;
pub const XC_GGA_K_BALTIN: u32 = 504;
pub const XC_GGA_K_LIEB: u32 = 505;
pub const XC_GGA_K_ABSP1: u32 = 506;
pub const XC_GGA_K_ABSP2: u32 = 507;
pub const XC_GGA_K_GR: u32 = 508;
pub const XC_GGA_K_LUDENA: u32 = 509;
pub const XC_GGA_K_GP85: u32 = 510;
pub const XC_GGA_K_PEARSON: u32 = 511;
pub const XC_GGA_K_OL1: u32 = 512;
pub const XC_GGA_K_OL2: u32 = 513;
pub const XC_GGA_K_FR_B88: u32 = 514;
pub const XC_GGA_K_FR_PW86: u32 = 515;
pub const XC_GGA_K_DK: u32 = 516;
pub const XC_GGA_K_PERDEW: u32 = 517;
pub const XC_GGA_K_VSK: u32 = 518;
pub const XC_GGA_K_VJKS: u32 = 519;
pub const XC_GGA_K_ERNZERHOF: u32 = 520;
pub const XC_GGA_K_LC94: u32 = 521;
pub const XC_GGA_K_LLP: u32 = 522;
pub const XC_GGA_K_THAKKAR: u32 = 523;
pub const XC_GGA_X_WPBEH: u32 = 524;
pub const XC_GGA_X_HJS_PBE: u32 = 525;
pub const XC_GGA_X_HJS_PBE_SOL: u32 = 526;
pub const XC_GGA_X_HJS_B88: u32 = 527;
pub const XC_GGA_X_HJS_B97X: u32 = 528;
pub const XC_GGA_X_ITYH: u32 = 529;
pub const XC_GGA_X_SFAT: u32 = 530;
pub const XC_GGA_X_SG4: u32 = 533;
pub const XC_GGA_C_SG4: u32 = 534;
pub const XC_GGA_X_GG99: u32 = 535;
pub const XC_GGA_X_PBEPOW: u32 = 539;
pub const XC_GGA_X_KGG99: u32 = 544;
pub const XC_GGA_XC_HLE16: u32 = 545;
pub const XC_GGA_C_SCAN_E0: u32 = 553;
pub const XC_GGA_C_GAPC: u32 = 555;
pub const XC_GGA_C_GAPLOC: u32 = 556;
pub const XC_GGA_C_ZVPBEINT: u32 = 557;
pub const XC_GGA_C_ZVPBESOL: u32 = 558;
pub const XC_GGA_C_TM_LYP: u32 = 559;
pub const XC_GGA_C_TM_PBE: u32 = 560;
pub const XC_GGA_C_W94: u32 = 561;
pub const XC_GGA_C_CS1: u32 = 565;
pub const XC_GGA_X_B88M: u32 = 570;
pub const XC_GGA_XC_KT3: u32 = 587;
pub const XC_GGA_XC_LB07: u32 = 589;
pub const XC_GGA_K_GDS08: u32 = 591;
pub const XC_GGA_K_GHDS10: u32 = 592;
pub const XC_GGA_K_GHDS10R: u32 = 593;
pub const XC_GGA_K_TKVLN: u32 = 594;
pub const XC_GGA_K_PBE3: u32 = 595;
pub const XC_GGA_K_PBE4: u32 = 596;
pub const XC_GGA_K_EXP4: u32 = 597;
pub const XC_GGA_X_SFAT_PBE: u32 = 601;
pub const XC_GGA_X_FD_LB94: u32 = 604;
pub const XC_GGA_X_FD_REVLB94: u32 = 605;
pub const XC_GGA_C_ZVPBELOC: u32 = 606;
pub const XC_GGA_X_LCGAU: u32 = 708;
pub const XC_GGA_X_LCGAU_CORE: u32 = 709;
pub const XC_GGA_X_LC2GAU: u32 = 710;
pub const XC_GGA_C_MGGAC: u32 = 712;
pub const XC_HYB_GGA_X_N12_SX: u32 = 81;
pub const XC_HYB_GGA_XC_B97_1P: u32 = 266;
pub const XC_HYB_GGA_XC_PBE_MOL0: u32 = 273;
pub const XC_HYB_GGA_XC_PBE_SOL0: u32 = 274;
pub const XC_HYB_GGA_XC_PBEB0: u32 = 275;
pub const XC_HYB_GGA_XC_PBE_MOLB0: u32 = 276;
pub const XC_HYB_GGA_XC_PBE50: u32 = 290;
pub const XC_HYB_GGA_XC_LC_BLYP: u32 = 400;
pub const XC_HYB_GGA_XC_B3PW91: u32 = 401;
pub const XC_HYB_GGA_XC_B3LYP: u32 = 402;
pub const XC_HYB_GGA_XC_B3P86: u32 = 403;
pub const XC_HYB_GGA_XC_O3LYP: u32 = 404;
pub const XC_HYB_GGA_XC_MPW1K: u32 = 405;
pub const XC_HYB_GGA_XC_PBEH: u32 = 406;
pub const XC_HYB_GGA_XC_B97: u32 = 407;
pub const XC_HYB_GGA_XC_B97_1: u32 = 408;
pub const XC_HYB_GGA_XC_APF: u32 = 409;
pub const XC_HYB_GGA_XC_B97_2: u32 = 410;
pub const XC_HYB_GGA_XC_X3LYP: u32 = 411;
pub const XC_HYB_GGA_XC_B1WC: u32 = 412;
pub const XC_HYB_GGA_XC_B97_K: u32 = 413;
pub const XC_HYB_GGA_XC_B97_3: u32 = 414;
pub const XC_HYB_GGA_XC_MPW3PW: u32 = 415;
pub const XC_HYB_GGA_XC_B1LYP: u32 = 416;
pub const XC_HYB_GGA_XC_B1PW91: u32 = 417;
pub const XC_HYB_GGA_XC_MPW1PW: u32 = 418;
pub const XC_HYB_GGA_XC_MPW3LYP: u32 = 419;
pub const XC_HYB_GGA_XC_SB98_1A: u32 = 420;
pub const XC_HYB_GGA_XC_SB98_1B: u32 = 421;
pub const XC_HYB_GGA_XC_SB98_1C: u32 = 422;
pub const XC_HYB_GGA_XC_SB98_2A: u32 = 423;
pub const XC_HYB_GGA_XC_SB98_2B: u32 = 424;
pub const XC_HYB_GGA_XC_SB98_2C: u32 = 425;
pub const XC_HYB_GGA_X_SOGGA11_X: u32 = 426;
pub const XC_HYB_GGA_XC_HSE03: u32 = 427;
pub const XC_HYB_GGA_XC_HSE06: u32 = 428;
pub const XC_HYB_GGA_XC_HJS_PBE: u32 = 429;
pub const XC_HYB_GGA_XC_HJS_PBE_SOL: u32 = 430;
pub const XC_HYB_GGA_XC_HJS_B88: u32 = 431;
pub const XC_HYB_GGA_XC_HJS_B97X: u32 = 432;
pub const XC_HYB_GGA_XC_CAM_B3LYP: u32 = 433;
pub const XC_HYB_GGA_XC_TUNED_CAM_B3LYP: u32 = 434;
pub const XC_HYB_GGA_XC_BHANDH: u32 = 435;
pub const XC_HYB_GGA_XC_BHANDHLYP: u32 = 436;
pub const XC_HYB_GGA_XC_MB3LYP_RC04: u32 = 437;
pub const XC_HYB_GGA_XC_MPWLYP1M: u32 = 453;
pub const XC_HYB_GGA_XC_REVB3LYP: u32 = 454;
pub const XC_HYB_GGA_XC_CAMY_BLYP: u32 = 455;
pub const XC_HYB_GGA_XC_PBE0_13: u32 = 456;
pub const XC_HYB_GGA_XC_B3LYPS: u32 = 459;
pub const XC_HYB_GGA_XC_QTP17: u32 = 460;
pub const XC_HYB_GGA_XC_B3LYP_MCM1: u32 = 461;
pub const XC_HYB_GGA_XC_B3LYP_MCM2: u32 = 462;
pub const XC_HYB_GGA_XC_WB97: u32 = 463;
pub const XC_HYB_GGA_XC_WB97X: u32 = 464;
pub const XC_HYB_GGA_XC_LRC_WPBEH: u32 = 465;
pub const XC_HYB_GGA_XC_WB97X_V: u32 = 466;
pub const XC_HYB_GGA_XC_LCY_PBE: u32 = 467;
pub const XC_HYB_GGA_XC_LCY_BLYP: u32 = 468;
pub const XC_HYB_GGA_XC_LC_VV10: u32 = 469;
pub const XC_HYB_GGA_XC_CAMY_B3LYP: u32 = 470;
pub const XC_HYB_GGA_XC_WB97X_D: u32 = 471;
pub const XC_HYB_GGA_XC_HPBEINT: u32 = 472;
pub const XC_HYB_GGA_XC_LRC_WPBE: u32 = 473;
pub const XC_HYB_GGA_XC_B3LYP5: u32 = 475;
pub const XC_HYB_GGA_XC_EDF2: u32 = 476;
pub const XC_HYB_GGA_XC_CAP0: u32 = 477;
pub const XC_HYB_GGA_XC_LC_WPBE: u32 = 478;
pub const XC_HYB_GGA_XC_HSE12: u32 = 479;
pub const XC_HYB_GGA_XC_HSE12S: u32 = 480;
pub const XC_HYB_GGA_XC_HSE_SOL: u32 = 481;
pub const XC_HYB_GGA_XC_CAM_QTP_01: u32 = 482;
pub const XC_HYB_GGA_XC_MPW1LYP: u32 = 483;
pub const XC_HYB_GGA_XC_MPW1PBE: u32 = 484;
pub const XC_HYB_GGA_XC_KMLYP: u32 = 485;
pub const XC_HYB_GGA_XC_LC_WPBE_WHS: u32 = 486;
pub const XC_HYB_GGA_XC_LC_WPBEH_WHS: u32 = 487;
pub const XC_HYB_GGA_XC_LC_WPBE08_WHS: u32 = 488;
pub const XC_HYB_GGA_XC_LC_WPBESOL_WHS: u32 = 489;
pub const XC_HYB_GGA_XC_CAM_QTP_00: u32 = 490;
pub const XC_HYB_GGA_XC_CAM_QTP_02: u32 = 491;
pub const XC_HYB_GGA_XC_LC_QTP: u32 = 492;
pub const XC_HYB_GGA_X_S12H: u32 = 496;
pub const XC_HYB_GGA_XC_BLYP35: u32 = 499;
pub const XC_HYB_GGA_XC_B5050LYP: u32 = 572;
pub const XC_HYB_GGA_XC_APBE0: u32 = 607;
pub const XC_HYB_GGA_XC_HAPBE: u32 = 608;
pub const XC_HYB_GGA_XC_RCAM_B3LYP: u32 = 610;
pub const XC_HYB_GGA_XC_WC04: u32 = 611;
pub const XC_HYB_GGA_XC_WP04: u32 = 612;
pub const XC_HYB_GGA_XC_CAM_PBEH: u32 = 681;
pub const XC_HYB_GGA_XC_CAMY_PBEH: u32 = 682;
pub const XC_MGGA_C_DLDF: u32 = 37;
pub const XC_MGGA_XC_ZLP: u32 = 42;
pub const XC_MGGA_XC_OTPSS_D: u32 = 64;
pub const XC_MGGA_C_CS: u32 = 72;
pub const XC_MGGA_C_MN12_SX: u32 = 73;
pub const XC_MGGA_C_MN12_L: u32 = 74;
pub const XC_MGGA_C_M11_L: u32 = 75;
pub const XC_MGGA_C_M11: u32 = 76;
pub const XC_MGGA_C_M08_SO: u32 = 77;
pub const XC_MGGA_C_M08_HX: u32 = 78;
pub const XC_MGGA_C_REVM11: u32 = 172;
pub const XC_MGGA_X_LTA: u32 = 201;
pub const XC_MGGA_X_TPSS: u32 = 202;
pub const XC_MGGA_X_M06_L: u32 = 203;
pub const XC_MGGA_X_GVT4: u32 = 204;
pub const XC_MGGA_X_TAU_HCTH: u32 = 205;
pub const XC_MGGA_X_BR89: u32 = 206;
pub const XC_MGGA_X_BJ06: u32 = 207;
pub const XC_MGGA_X_TB09: u32 = 208;
pub const XC_MGGA_X_RPP09: u32 = 209;
pub const XC_MGGA_X_2D_PRHG07: u32 = 210;
pub const XC_MGGA_X_2D_PRHG07_PRP10: u32 = 211;
pub const XC_MGGA_X_REVTPSS: u32 = 212;
pub const XC_MGGA_X_PKZB: u32 = 213;
pub const XC_MGGA_X_BR89_1: u32 = 214;
pub const XC_MGGA_X_MS0: u32 = 221;
pub const XC_MGGA_X_MS1: u32 = 222;
pub const XC_MGGA_X_MS2: u32 = 223;
pub const XC_MGGA_X_M11_L: u32 = 226;
pub const XC_MGGA_X_MN12_L: u32 = 227;
pub const XC_MGGA_XC_CC06: u32 = 229;
pub const XC_MGGA_X_MK00: u32 = 230;
pub const XC_MGGA_C_TPSS: u32 = 231;
pub const XC_MGGA_C_VSXC: u32 = 232;
pub const XC_MGGA_C_M06_L: u32 = 233;
pub const XC_MGGA_C_M06_HF: u32 = 234;
pub const XC_MGGA_C_M06: u32 = 235;
pub const XC_MGGA_C_M06_2X: u32 = 236;
pub const XC_MGGA_C_M05: u32 = 237;
pub const XC_MGGA_C_M05_2X: u32 = 238;
pub const XC_MGGA_C_PKZB: u32 = 239;
pub const XC_MGGA_C_BC95: u32 = 240;
pub const XC_MGGA_C_REVTPSS: u32 = 241;
pub const XC_MGGA_XC_TPSSLYP1W: u32 = 242;
pub const XC_MGGA_X_MK00B: u32 = 243;
pub const XC_MGGA_X_BLOC: u32 = 244;
pub const XC_MGGA_X_MODTPSS: u32 = 245;
pub const XC_MGGA_C_TPSSLOC: u32 = 247;
pub const XC_MGGA_X_MBEEF: u32 = 249;
pub const XC_MGGA_X_MBEEFVDW: u32 = 250;
pub const XC_MGGA_C_TM: u32 = 251;
pub const XC_MGGA_XC_B97M_V: u32 = 254;
pub const XC_MGGA_X_MVS: u32 = 257;
pub const XC_MGGA_X_MN15_L: u32 = 260;
pub const XC_MGGA_C_MN15_L: u32 = 261;
pub const XC_MGGA_X_SCAN: u32 = 263;
pub const XC_MGGA_C_SCAN: u32 = 267;
pub const XC_MGGA_C_MN15: u32 = 269;
pub const XC_MGGA_X_B00: u32 = 284;
pub const XC_MGGA_XC_HLE17: u32 = 288;
pub const XC_MGGA_C_SCAN_RVV10: u32 = 292;
pub const XC_MGGA_X_REVM06_L: u32 = 293;
pub const XC_MGGA_C_REVM06_L: u32 = 294;
pub const XC_MGGA_X_RTPSS: u32 = 299;
pub const XC_MGGA_X_MS2B: u32 = 300;
pub const XC_MGGA_X_MS2BS: u32 = 301;
pub const XC_MGGA_X_MVSB: u32 = 302;
pub const XC_MGGA_X_MVSBS: u32 = 303;
pub const XC_MGGA_C_REVM06: u32 = 306;
pub const XC_MGGA_X_RSCAN: u32 = 493;
pub const XC_MGGA_C_RSCAN: u32 = 494;
pub const XC_MGGA_X_TM: u32 = 540;
pub const XC_MGGA_X_VT84: u32 = 541;
pub const XC_MGGA_X_SA_TPSS: u32 = 542;
pub const XC_MGGA_K_PC07: u32 = 543;
pub const XC_MGGA_C_KCIS: u32 = 562;
pub const XC_MGGA_XC_LP90: u32 = 564;
pub const XC_MGGA_C_B88: u32 = 571;
pub const XC_MGGA_X_GX: u32 = 575;
pub const XC_MGGA_X_PBE_GX: u32 = 576;
pub const XC_MGGA_X_REVSCAN: u32 = 581;
pub const XC_MGGA_C_REVSCAN: u32 = 582;
pub const XC_MGGA_C_SCAN_VV10: u32 = 584;
pub const XC_MGGA_C_REVSCAN_VV10: u32 = 585;
pub const XC_MGGA_X_BR89_EXPLICIT: u32 = 586;
pub const XC_MGGA_X_BR89_EXPLICIT_1: u32 = 602;
pub const XC_MGGA_X_REGTPSS: u32 = 603;
pub const XC_MGGA_X_2D_JS17: u32 = 609;
pub const XC_MGGA_X_TLDA: u32 = 685;
pub const XC_MGGA_X_EDMGGA: u32 = 686;
pub const XC_MGGA_X_GDME_NV: u32 = 687;
pub const XC_MGGA_X_RLDA: u32 = 688;
pub const XC_MGGA_X_GDME_0: u32 = 689;
pub const XC_MGGA_X_GDME_KOS: u32 = 690;
pub const XC_MGGA_X_GDME_VT: u32 = 691;
pub const XC_MGGA_X_REVTM: u32 = 693;
pub const XC_MGGA_C_REVTM: u32 = 694;
pub const XC_MGGA_X_MBRXC_BG: u32 = 696;
pub const XC_MGGA_X_MBRXH_BG: u32 = 697;
pub const XC_MGGA_X_SCANL: u32 = 700;
pub const XC_MGGA_X_REVSCANL: u32 = 701;
pub const XC_MGGA_C_SCANL: u32 = 702;
pub const XC_MGGA_C_SCANL_RVV10: u32 = 703;
pub const XC_MGGA_C_SCANL_VV10: u32 = 704;
pub const XC_MGGA_X_TASK: u32 = 707;
pub const XC_MGGA_X_MGGAC: u32 = 711;
pub const XC_HYB_MGGA_X_DLDF: u32 = 36;
pub const XC_HYB_MGGA_X_MS2H: u32 = 224;
pub const XC_HYB_MGGA_X_MN12_SX: u32 = 248;
pub const XC_HYB_MGGA_X_SCAN0: u32 = 264;
pub const XC_HYB_MGGA_X_MN15: u32 = 268;
pub const XC_HYB_MGGA_X_BMK: u32 = 279;
pub const XC_HYB_MGGA_X_TAU_HCTH: u32 = 282;
pub const XC_HYB_MGGA_X_M08_HX: u32 = 295;
pub const XC_HYB_MGGA_X_M08_SO: u32 = 296;
pub const XC_HYB_MGGA_X_M11: u32 = 297;
pub const XC_HYB_MGGA_X_REVM11: u32 = 304;
pub const XC_HYB_MGGA_X_REVM06: u32 = 305;
pub const XC_HYB_MGGA_X_M05: u32 = 438;
pub const XC_HYB_MGGA_X_M05_2X: u32 = 439;
pub const XC_HYB_MGGA_XC_B88B95: u32 = 440;
pub const XC_HYB_MGGA_XC_B86B95: u32 = 441;
pub const XC_HYB_MGGA_XC_PW86B95: u32 = 442;
pub const XC_HYB_MGGA_XC_BB1K: u32 = 443;
pub const XC_HYB_MGGA_X_M06_HF: u32 = 444;
pub const XC_HYB_MGGA_XC_MPW1B95: u32 = 445;
pub const XC_HYB_MGGA_XC_MPWB1K: u32 = 446;
pub const XC_HYB_MGGA_XC_X1B95: u32 = 447;
pub const XC_HYB_MGGA_XC_XB1K: u32 = 448;
pub const XC_HYB_MGGA_X_M06: u32 = 449;
pub const XC_HYB_MGGA_X_M06_2X: u32 = 450;
pub const XC_HYB_MGGA_XC_PW6B95: u32 = 451;
pub const XC_HYB_MGGA_XC_PWB6K: u32 = 452;
pub const XC_HYB_MGGA_XC_TPSSH: u32 = 457;
pub const XC_HYB_MGGA_XC_REVTPSSH: u32 = 458;
pub const XC_HYB_MGGA_X_MVSH: u32 = 474;
pub const XC_HYB_MGGA_XC_WB97M_V: u32 = 531;
pub const XC_HYB_MGGA_XC_B0KCIS: u32 = 563;
pub const XC_HYB_MGGA_XC_MPW1KCIS: u32 = 566;
pub const XC_HYB_MGGA_XC_MPWKCIS1K: u32 = 567;
pub const XC_HYB_MGGA_XC_PBE1KCIS: u32 = 568;
pub const XC_HYB_MGGA_XC_TPSS1KCIS: u32 = 569;
pub const XC_HYB_MGGA_X_REVSCAN0: u32 = 583;
pub const XC_HYB_MGGA_XC_B98: u32 = 598;
pub const XC_HYB_MGGA_XC_EDMGGAH: u32 = 695;
pub const XC_HYB_MGGA_X_JS18: u32 = 705;
pub const XC_HYB_MGGA_X_PJS18: u32 = 706;
pub const XC_LDA_X_1D: u32 = 21;
pub const XC_GGA_X_BGCP: u32 = 38;
pub const XC_GGA_C_BGCP: u32 = 39;
pub const XC_GGA_C_BCGP: u32 = 39;
pub const XC_GGA_C_VPBE: u32 = 83;
pub const XC_GGA_XC_LB: u32 = 160;
pub const XC_MGGA_C_CC06: u32 = 229;
pub const XC_GGA_K_ABSR1: u32 = 506;
pub const XC_GGA_K_ABSR2: u32 = 507;
pub const XC_LDA_C_LP_A: u32 = 547;
pub const XC_LDA_C_LP_B: u32 = 548;
pub const XC_MGGA_C_LP90: u32 = 564;
pub const XC_LDA_C_vBH: u32 = 17;
pub const XC_HYB_GGA_XC_B97_1p: u32 = 266;
pub const XC_HYB_GGA_XC_mPW1K: u32 = 405;
pub const XC_HYB_GGA_XC_mPW1PW: u32 = 418;
pub const XC_HYB_GGA_XC_SB98_1a: u32 = 420;
pub const XC_HYB_GGA_XC_SB98_1b: u32 = 421;
pub const XC_HYB_GGA_XC_SB98_1c: u32 = 422;
pub const XC_HYB_GGA_XC_SB98_2a: u32 = 423;
pub const XC_HYB_GGA_XC_SB98_2b: u32 = 424;
pub const XC_HYB_GGA_XC_SB98_2c: u32 = 425;
pub const XC_HYB_GGA_XC_B3LYPs: u32 = 459;
pub const XC_GGA_X_PBEpow: u32 = 539;
pub const XC_GGA_XC_B97: u32 = 167;
pub const XC_GGA_XC_B97_1: u32 = 168;
pub const XC_GGA_XC_B97_2: u32 = 169;
pub const XC_GGA_XC_B97_K: u32 = 171;
pub const XC_GGA_XC_B97_3: u32 = 172;
pub const XC_GGA_XC_SB98_1a: u32 = 176;
pub const XC_GGA_XC_SB98_1b: u32 = 177;
pub const XC_GGA_XC_SB98_1c: u32 = 178;
pub const XC_GGA_XC_SB98_2a: u32 = 179;
pub const XC_GGA_XC_SB98_2b: u32 = 180;
pub const XC_GGA_XC_SB98_2c: u32 = 181;
pub const XC_MGGA_X_M05: u32 = 214;
pub const XC_MGGA_X_M05_2X: u32 = 215;
pub const XC_MGGA_X_M06_HF: u32 = 216;
pub const XC_MGGA_X_M06: u32 = 217;
pub const XC_MGGA_X_M06_2X: u32 = 218;
pub const XC_MGGA_X_M08_HX: u32 = 219;
pub const XC_MGGA_X_M08_SO: u32 = 220;
pub const XC_MGGA_X_M11: u32 = 225;
pub const XC_MGGA_X_MN12_SX: u32 = 228;
pub const XC_GGA_XC_WB97: u32 = 251;
pub const XC_GGA_XC_WB97X: u32 = 252;
pub const XC_GGA_XC_WB97X_V: u32 = 253;
pub const XC_GGA_XC_WB97X_D: u32 = 256;
pub const XC_HYB_MGGA_XC_M08_HX: u32 = 460;
pub const XC_HYB_MGGA_XC_M08_SO: u32 = 461;
pub const XC_HYB_MGGA_XC_M11: u32 = 462;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub fn xc_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        micro: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xc_version_string() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct func_reference_type {
    pub ref_: *const ::std::os::raw::c_char,
    pub doi: *const ::std::os::raw::c_char,
    pub bibtex: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_func_reference_type() {
    assert_eq!(
        ::std::mem::size_of::<func_reference_type>(),
        24usize,
        concat!("Size of: ", stringify!(func_reference_type))
    );
    assert_eq!(
        ::std::mem::align_of::<func_reference_type>(),
        8usize,
        concat!("Alignment of ", stringify!(func_reference_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_reference_type>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(func_reference_type),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_reference_type>())).doi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(func_reference_type),
            "::",
            stringify!(doi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_reference_type>())).bibtex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(func_reference_type),
            "::",
            stringify!(bibtex)
        )
    );
}
extern "C" {
    pub fn xc_func_reference_get_ref(
        reference: *const func_reference_type,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_func_reference_get_doi(
        reference: *const func_reference_type,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_func_reference_get_bibtex(
        reference: *const func_reference_type,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct func_params_type {
    pub n: ::std::os::raw::c_int,
    pub names: *mut *const ::std::os::raw::c_char,
    pub descriptions: *mut *const ::std::os::raw::c_char,
    pub values: *const f64,
    pub set:
        ::std::option::Option<unsafe extern "C" fn(p: *mut xc_func_type, ext_params: *const f64)>,
}
#[test]
fn bindgen_test_layout_func_params_type() {
    assert_eq!(
        ::std::mem::size_of::<func_params_type>(),
        40usize,
        concat!("Size of: ", stringify!(func_params_type))
    );
    assert_eq!(
        ::std::mem::align_of::<func_params_type>(),
        8usize,
        concat!("Alignment of ", stringify!(func_params_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_params_type>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(func_params_type),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_params_type>())).names as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(func_params_type),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_params_type>())).descriptions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(func_params_type),
            "::",
            stringify!(descriptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_params_type>())).values as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(func_params_type),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<func_params_type>())).set as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(func_params_type),
            "::",
            stringify!(set)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_func_info_type {
    pub number: ::std::os::raw::c_int,
    pub kind: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub family: ::std::os::raw::c_int,
    pub refs: [*mut func_reference_type; 5usize],
    pub flags: ::std::os::raw::c_int,
    pub dens_threshold: f64,
    pub ext_params: func_params_type,
    pub init: ::std::option::Option<unsafe extern "C" fn(p: *mut xc_func_type)>,
    pub end: ::std::option::Option<unsafe extern "C" fn(p: *mut xc_func_type)>,
    pub lda: ::std::option::Option<
        unsafe extern "C" fn(
            p: *const xc_func_type,
            np: size_t,
            rho: *const f64,
            zk: *mut f64,
            vrho: *mut f64,
            v2rho2: *mut f64,
            v3rho3: *mut f64,
            v4rho4: *mut f64,
        ),
    >,
    pub gga: ::std::option::Option<
        unsafe extern "C" fn(
            p: *const xc_func_type,
            np: size_t,
            rho: *const f64,
            sigma: *const f64,
            zk: *mut f64,
            vrho: *mut f64,
            vsigma: *mut f64,
            v2rho2: *mut f64,
            v2rhosigma: *mut f64,
            v2sigma2: *mut f64,
            v3rho3: *mut f64,
            v3rho2sigma: *mut f64,
            v3rhosigma2: *mut f64,
            v3sigma3: *mut f64,
            v4rho4: *mut f64,
            v4rho3sigma: *mut f64,
            v4rho2sigma2: *mut f64,
            v4rhosigma3: *mut f64,
            v4sigma4: *mut f64,
        ),
    >,
    pub mgga: ::std::option::Option<
        unsafe extern "C" fn(
            p: *const xc_func_type,
            np: size_t,
            rho: *const f64,
            sigma: *const f64,
            lapl_rho: *const f64,
            tau: *const f64,
            zk: *mut f64,
            vrho: *mut f64,
            vsigma: *mut f64,
            vlapl: *mut f64,
            vtau: *mut f64,
            v2rho2: *mut f64,
            v2rhosigma: *mut f64,
            v2rholapl: *mut f64,
            v2rhotau: *mut f64,
            v2sigma2: *mut f64,
            v2sigmalapl: *mut f64,
            v2sigmatau: *mut f64,
            v2lapl2: *mut f64,
            v2lapltau: *mut f64,
            v2tau2: *mut f64,
            v3rho3: *mut f64,
            v3rho2sigma: *mut f64,
            v3rho2lapl: *mut f64,
            v3rho2tau: *mut f64,
            v3rhosigma2: *mut f64,
            v3rhosigmalapl: *mut f64,
            v3rhosigmatau: *mut f64,
            v3rholapl2: *mut f64,
            v3rholapltau: *mut f64,
            v3rhotau2: *mut f64,
            v3sigma3: *mut f64,
            v3sigma2lapl: *mut f64,
            v3sigma2tau: *mut f64,
            v3sigmalapl2: *mut f64,
            v3sigmalapltau: *mut f64,
            v3sigmatau2: *mut f64,
            v3lapl3: *mut f64,
            v3lapl2tau: *mut f64,
            v3lapltau2: *mut f64,
            v3tau3: *mut f64,
            v4rho4: *mut f64,
            v4rho3sigma: *mut f64,
            v4rho3lapl: *mut f64,
            v4rho3tau: *mut f64,
            v4rho2sigma2: *mut f64,
            v4rho2sigmalapl: *mut f64,
            v4rho2sigmatau: *mut f64,
            v4rho2lapl2: *mut f64,
            v4rho2lapltau: *mut f64,
            v4rho2tau2: *mut f64,
            v4rhosigma3: *mut f64,
            v4rhosigma2lapl: *mut f64,
            v4rhosigma2tau: *mut f64,
            v4rhosigmalapl2: *mut f64,
            v4rhosigmalapltau: *mut f64,
            v4rhosigmatau2: *mut f64,
            v4rholapl3: *mut f64,
            v4rholapl2tau: *mut f64,
            v4rholapltau2: *mut f64,
            v4rhotau3: *mut f64,
            v4sigma4: *mut f64,
            v4sigma3lapl: *mut f64,
            v4sigma3tau: *mut f64,
            v4sigma2lapl2: *mut f64,
            v4sigma2lapltau: *mut f64,
            v4sigma2tau2: *mut f64,
            v4sigmalapl3: *mut f64,
            v4sigmalapl2tau: *mut f64,
            v4sigmalapltau2: *mut f64,
            v4sigmatau3: *mut f64,
            v4lapl4: *mut f64,
            v4lapl3tau: *mut f64,
            v4lapl2tau2: *mut f64,
            v4lapltau3: *mut f64,
            v4tau4: *mut f64,
        ),
    >,
}
#[test]
fn bindgen_test_layout_xc_func_info_type() {
    assert_eq!(
        ::std::mem::size_of::<xc_func_info_type>(),
        160usize,
        concat!("Size of: ", stringify!(xc_func_info_type))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_func_info_type>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_func_info_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).family as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).refs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_func_info_type>())).dens_threshold as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(dens_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).ext_params as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(ext_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).init as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).end as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).lda as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(lda)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).gga as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(gga)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_info_type>())).mgga as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_info_type),
            "::",
            stringify!(mgga)
        )
    );
}
extern "C" {
    pub fn xc_func_info_get_number(info: *const xc_func_info_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_func_info_get_kind(info: *const xc_func_info_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_func_info_get_name(info: *const xc_func_info_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_func_info_get_family(info: *const xc_func_info_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_func_info_get_flags(info: *const xc_func_info_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_func_info_get_references(
        info: *const xc_func_info_type,
        number: ::std::os::raw::c_int,
    ) -> *const func_reference_type;
}
extern "C" {
    pub fn xc_func_info_get_n_ext_params(info: *const xc_func_info_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_func_info_get_ext_params_name(
        p: *const xc_func_info_type,
        number: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_func_info_get_ext_params_description(
        info: *const xc_func_info_type,
        number: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_func_info_get_ext_params_default_value(
        info: *const xc_func_info_type,
        number: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_dimensions {
    pub rho: ::std::os::raw::c_int,
    pub sigma: ::std::os::raw::c_int,
    pub lapl: ::std::os::raw::c_int,
    pub tau: ::std::os::raw::c_int,
    pub zk: ::std::os::raw::c_int,
    pub vrho: ::std::os::raw::c_int,
    pub vsigma: ::std::os::raw::c_int,
    pub vlapl: ::std::os::raw::c_int,
    pub vtau: ::std::os::raw::c_int,
    pub v2rho2: ::std::os::raw::c_int,
    pub v2rhosigma: ::std::os::raw::c_int,
    pub v2rholapl: ::std::os::raw::c_int,
    pub v2rhotau: ::std::os::raw::c_int,
    pub v2sigma2: ::std::os::raw::c_int,
    pub v2sigmalapl: ::std::os::raw::c_int,
    pub v2sigmatau: ::std::os::raw::c_int,
    pub v2lapl2: ::std::os::raw::c_int,
    pub v2lapltau: ::std::os::raw::c_int,
    pub v2tau2: ::std::os::raw::c_int,
    pub v3rho3: ::std::os::raw::c_int,
    pub v3rho2sigma: ::std::os::raw::c_int,
    pub v3rho2lapl: ::std::os::raw::c_int,
    pub v3rho2tau: ::std::os::raw::c_int,
    pub v3rhosigma2: ::std::os::raw::c_int,
    pub v3rhosigmalapl: ::std::os::raw::c_int,
    pub v3rhosigmatau: ::std::os::raw::c_int,
    pub v3rholapl2: ::std::os::raw::c_int,
    pub v3rholapltau: ::std::os::raw::c_int,
    pub v3rhotau2: ::std::os::raw::c_int,
    pub v3sigma3: ::std::os::raw::c_int,
    pub v3sigma2lapl: ::std::os::raw::c_int,
    pub v3sigma2tau: ::std::os::raw::c_int,
    pub v3sigmalapl2: ::std::os::raw::c_int,
    pub v3sigmalapltau: ::std::os::raw::c_int,
    pub v3sigmatau2: ::std::os::raw::c_int,
    pub v3lapl3: ::std::os::raw::c_int,
    pub v3lapl2tau: ::std::os::raw::c_int,
    pub v3lapltau2: ::std::os::raw::c_int,
    pub v3tau3: ::std::os::raw::c_int,
    pub v4rho4: ::std::os::raw::c_int,
    pub v4rho3sigma: ::std::os::raw::c_int,
    pub v4rho3lapl: ::std::os::raw::c_int,
    pub v4rho3tau: ::std::os::raw::c_int,
    pub v4rho2sigma2: ::std::os::raw::c_int,
    pub v4rho2sigmalapl: ::std::os::raw::c_int,
    pub v4rho2sigmatau: ::std::os::raw::c_int,
    pub v4rho2lapl2: ::std::os::raw::c_int,
    pub v4rho2lapltau: ::std::os::raw::c_int,
    pub v4rho2tau2: ::std::os::raw::c_int,
    pub v4rhosigma3: ::std::os::raw::c_int,
    pub v4rhosigma2lapl: ::std::os::raw::c_int,
    pub v4rhosigma2tau: ::std::os::raw::c_int,
    pub v4rhosigmalapl2: ::std::os::raw::c_int,
    pub v4rhosigmalapltau: ::std::os::raw::c_int,
    pub v4rhosigmatau2: ::std::os::raw::c_int,
    pub v4rholapl3: ::std::os::raw::c_int,
    pub v4rholapl2tau: ::std::os::raw::c_int,
    pub v4rholapltau2: ::std::os::raw::c_int,
    pub v4rhotau3: ::std::os::raw::c_int,
    pub v4sigma4: ::std::os::raw::c_int,
    pub v4sigma3lapl: ::std::os::raw::c_int,
    pub v4sigma3tau: ::std::os::raw::c_int,
    pub v4sigma2lapl2: ::std::os::raw::c_int,
    pub v4sigma2lapltau: ::std::os::raw::c_int,
    pub v4sigma2tau2: ::std::os::raw::c_int,
    pub v4sigmalapl3: ::std::os::raw::c_int,
    pub v4sigmalapl2tau: ::std::os::raw::c_int,
    pub v4sigmalapltau2: ::std::os::raw::c_int,
    pub v4sigmatau3: ::std::os::raw::c_int,
    pub v4lapl4: ::std::os::raw::c_int,
    pub v4lapl3tau: ::std::os::raw::c_int,
    pub v4lapl2tau2: ::std::os::raw::c_int,
    pub v4lapltau3: ::std::os::raw::c_int,
    pub v4tau4: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_xc_dimensions() {
    assert_eq!(
        ::std::mem::size_of::<xc_dimensions>(),
        296usize,
        concat!("Size of: ", stringify!(xc_dimensions))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_dimensions>(),
        4usize,
        concat!("Alignment of ", stringify!(xc_dimensions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).rho as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(rho)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).sigma as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(sigma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).lapl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(lapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).tau as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).zk as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(zk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).vrho as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(vrho)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).vsigma as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(vsigma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).vlapl as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(vlapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).vtau as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(vtau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2rho2 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2rho2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2rhosigma as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2rhosigma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2rholapl as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2rholapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2rhotau as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2rhotau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2sigma2 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2sigma2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2sigmalapl as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2sigmalapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2sigmatau as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2sigmatau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2lapl2 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2lapl2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2lapltau as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2lapltau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v2tau2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v2tau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rho3 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rho3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rho2sigma as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rho2sigma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rho2lapl as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rho2lapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rho2tau as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rho2tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rhosigma2 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rhosigma2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rhosigmalapl as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rhosigmalapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rhosigmatau as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rhosigmatau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rholapl2 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rholapl2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rholapltau as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rholapltau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3rhotau2 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3rhotau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3sigma3 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3sigma3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3sigma2lapl as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3sigma2lapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3sigma2tau as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3sigma2tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3sigmalapl2 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3sigmalapl2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3sigmalapltau as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3sigmalapltau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3sigmatau2 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3sigmatau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3lapl3 as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3lapl3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3lapl2tau as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3lapl2tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3lapltau2 as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3lapltau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v3tau3 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v3tau3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho4 as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho3sigma as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho3sigma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho3lapl as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho3lapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho3tau as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho3tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho2sigma2 as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho2sigma2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho2sigmalapl as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho2sigmalapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho2sigmatau as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho2sigmatau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho2lapl2 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho2lapl2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho2lapltau as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho2lapltau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rho2tau2 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rho2tau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rhosigma3 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rhosigma3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rhosigma2lapl as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rhosigma2lapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rhosigma2tau as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rhosigma2tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rhosigmalapl2 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rhosigmalapl2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rhosigmalapltau as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rhosigmalapltau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rhosigmatau2 as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rhosigmatau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rholapl3 as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rholapl3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rholapl2tau as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rholapl2tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rholapltau2 as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rholapltau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4rhotau3 as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4rhotau3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigma4 as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigma4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigma3lapl as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigma3lapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigma3tau as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigma3tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigma2lapl2 as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigma2lapl2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigma2lapltau as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigma2lapltau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigma2tau2 as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigma2tau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigmalapl3 as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigmalapl3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigmalapl2tau as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigmalapl2tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigmalapltau2 as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigmalapltau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4sigmatau3 as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4sigmatau3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4lapl4 as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4lapl4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4lapl3tau as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4lapl3tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4lapl2tau2 as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4lapl2tau2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4lapltau3 as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4lapltau3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dimensions>())).v4tau4 as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dimensions),
            "::",
            stringify!(v4tau4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_func_type {
    pub info: *const xc_func_info_type,
    pub nspin: ::std::os::raw::c_int,
    pub n_func_aux: ::std::os::raw::c_int,
    pub func_aux: *mut *mut xc_func_type,
    pub mix_coef: *mut f64,
    #[doc = "Parameters for range-separated hybrids"]
    #[doc = "cam_omega: the range separation constant"]
    #[doc = "cam_alpha: fraction of full Hartree-Fock exchange, used both for"]
    #[doc = "usual hybrids as well as range-separated ones"]
    #[doc = "cam_beta:  fraction of short-range only(!) exchange in"]
    #[doc = "range-separated hybrids"]
    #[doc = ""]
    #[doc = "N.B. Different conventions for alpha and beta can be found in"]
    #[doc = "literature. In the convention used in libxc, at short range the"]
    #[doc = "fraction of exact exchange is cam_alpha+cam_beta, while at long"]
    #[doc = "range it is cam_alpha."]
    pub cam_omega: f64,
    #[doc = "Parameters for range-separated hybrids"]
    #[doc = "cam_omega: the range separation constant"]
    #[doc = "cam_alpha: fraction of full Hartree-Fock exchange, used both for"]
    #[doc = "usual hybrids as well as range-separated ones"]
    #[doc = "cam_beta:  fraction of short-range only(!) exchange in"]
    #[doc = "range-separated hybrids"]
    #[doc = ""]
    #[doc = "N.B. Different conventions for alpha and beta can be found in"]
    #[doc = "literature. In the convention used in libxc, at short range the"]
    #[doc = "fraction of exact exchange is cam_alpha+cam_beta, while at long"]
    #[doc = "range it is cam_alpha."]
    pub cam_alpha: f64,
    #[doc = "Parameters for range-separated hybrids"]
    #[doc = "cam_omega: the range separation constant"]
    #[doc = "cam_alpha: fraction of full Hartree-Fock exchange, used both for"]
    #[doc = "usual hybrids as well as range-separated ones"]
    #[doc = "cam_beta:  fraction of short-range only(!) exchange in"]
    #[doc = "range-separated hybrids"]
    #[doc = ""]
    #[doc = "N.B. Different conventions for alpha and beta can be found in"]
    #[doc = "literature. In the convention used in libxc, at short range the"]
    #[doc = "fraction of exact exchange is cam_alpha+cam_beta, while at long"]
    #[doc = "range it is cam_alpha."]
    pub cam_beta: f64,
    pub nlc_b: f64,
    pub nlc_C: f64,
    pub dim: xc_dimensions,
    pub params: *mut ::std::os::raw::c_void,
    pub dens_threshold: f64,
}
#[test]
fn bindgen_test_layout_xc_func_type() {
    assert_eq!(
        ::std::mem::size_of::<xc_func_type>(),
        384usize,
        concat!("Size of: ", stringify!(xc_func_type))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_func_type>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_func_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).nspin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(nspin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).n_func_aux as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(n_func_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).func_aux as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(func_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).mix_coef as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(mix_coef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).cam_omega as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(cam_omega)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).cam_alpha as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(cam_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).cam_beta as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(cam_beta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).nlc_b as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(nlc_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).nlc_C as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(nlc_C)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).dim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).params as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_func_type>())).dens_threshold as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_func_type),
            "::",
            stringify!(dens_threshold)
        )
    );
}
extern "C" {
    pub fn xc_functional_get_number(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_functional_get_name(number: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_family_from_id(
        id: ::std::os::raw::c_int,
        family: *mut ::std::os::raw::c_int,
        number: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_number_of_functionals() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_maximum_name_length() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_available_functional_numbers(list: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn xc_available_functional_names(list: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn xc_func_alloc() -> *mut xc_func_type;
}
extern "C" {
    pub fn xc_func_init(
        p: *mut xc_func_type,
        functional: ::std::os::raw::c_int,
        nspin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_func_end(p: *mut xc_func_type);
}
extern "C" {
    pub fn xc_func_free(p: *mut xc_func_type);
}
extern "C" {
    pub fn xc_func_get_info(p: *const xc_func_type) -> *const xc_func_info_type;
}
extern "C" {
    pub fn xc_func_set_dens_threshold(p: *mut xc_func_type, dens_threshold: f64);
}
extern "C" {
    pub fn xc_func_set_ext_params(p: *mut xc_func_type, ext_params: *mut f64);
}
extern "C" {
    pub fn xc_func_set_ext_params_name(
        p: *mut xc_func_type,
        name: *const ::std::os::raw::c_char,
        par: f64,
    );
}
extern "C" {
    pub fn xc_lda(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        v2rho2: *mut f64,
        v3rho3: *mut f64,
        v4rho4: *mut f64,
    );
}
extern "C" {
    pub fn xc_gga(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2sigma2: *mut f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rhosigma2: *mut f64,
        v3sigma3: *mut f64,
        v4rho4: *mut f64,
        v4rho3sigma: *mut f64,
        v4rho2sigma2: *mut f64,
        v4rhosigma3: *mut f64,
        v4sigma4: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl_rho: *const f64,
        tau: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        vlapl: *mut f64,
        vtau: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2rholapl: *mut f64,
        v2rhotau: *mut f64,
        v2sigma2: *mut f64,
        v2sigmalapl: *mut f64,
        v2sigmatau: *mut f64,
        v2lapl2: *mut f64,
        v2lapltau: *mut f64,
        v2tau2: *mut f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rho2lapl: *mut f64,
        v3rho2tau: *mut f64,
        v3rhosigma2: *mut f64,
        v3rhosigmalapl: *mut f64,
        v3rhosigmatau: *mut f64,
        v3rholapl2: *mut f64,
        v3rholapltau: *mut f64,
        v3rhotau2: *mut f64,
        v3sigma3: *mut f64,
        v3sigma2lapl: *mut f64,
        v3sigma2tau: *mut f64,
        v3sigmalapl2: *mut f64,
        v3sigmalapltau: *mut f64,
        v3sigmatau2: *mut f64,
        v3lapl3: *mut f64,
        v3lapl2tau: *mut f64,
        v3lapltau2: *mut f64,
        v3tau3: *mut f64,
        v4rho4: *mut f64,
        v4rho3sigma: *mut f64,
        v4rho3lapl: *mut f64,
        v4rho3tau: *mut f64,
        v4rho2sigma2: *mut f64,
        v4rho2sigmalapl: *mut f64,
        v4rho2sigmatau: *mut f64,
        v4rho2lapl2: *mut f64,
        v4rho2lapltau: *mut f64,
        v4rho2tau2: *mut f64,
        v4rhosigma3: *mut f64,
        v4rhosigma2lapl: *mut f64,
        v4rhosigma2tau: *mut f64,
        v4rhosigmalapl2: *mut f64,
        v4rhosigmalapltau: *mut f64,
        v4rhosigmatau2: *mut f64,
        v4rholapl3: *mut f64,
        v4rholapl2tau: *mut f64,
        v4rholapltau2: *mut f64,
        v4rhotau3: *mut f64,
        v4sigma4: *mut f64,
        v4sigma3lapl: *mut f64,
        v4sigma3tau: *mut f64,
        v4sigma2lapl2: *mut f64,
        v4sigma2lapltau: *mut f64,
        v4sigma2tau2: *mut f64,
        v4sigmalapl3: *mut f64,
        v4sigmalapl2tau: *mut f64,
        v4sigmalapltau2: *mut f64,
        v4sigmatau3: *mut f64,
        v4lapl4: *mut f64,
        v4lapl3tau: *mut f64,
        v4lapl2tau2: *mut f64,
        v4lapltau3: *mut f64,
        v4tau4: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_exc(p: *const xc_func_type, np: size_t, rho: *const f64, zk: *mut f64);
}
extern "C" {
    pub fn xc_gga_exc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        zk: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_exc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        zk: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_exc_vxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
    );
}
extern "C" {
    pub fn xc_gga_exc_vxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_exc_vxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        vlapl: *mut f64,
        vtau: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_vxc(p: *const xc_func_type, np: size_t, rho: *const f64, vrho: *mut f64);
}
extern "C" {
    pub fn xc_gga_vxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        vrho: *mut f64,
        vsigma: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_vxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        vlapl: *mut f64,
        vtau: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_exc_vxc_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        v2rho2: *mut f64,
    );
}
extern "C" {
    pub fn xc_gga_exc_vxc_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2sigma2: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_exc_vxc_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        vlapl: *mut f64,
        vtau: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2rholapl: *mut f64,
        v2rhotau: *mut f64,
        v2sigma2: *mut f64,
        v2sigmalapl: *mut f64,
        v2sigmatau: *mut f64,
        v2lapl2: *mut f64,
        v2lapltau: *mut f64,
        v2tau2: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_vxc_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        vrho: *mut f64,
        v2rho2: *mut f64,
    );
}
extern "C" {
    pub fn xc_gga_vxc_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2sigma2: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_vxc_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        vlapl: *mut f64,
        vtau: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2rholapl: *mut f64,
        v2rhotau: *mut f64,
        v2sigma2: *mut f64,
        v2sigmalapl: *mut f64,
        v2sigmatau: *mut f64,
        v2lapl2: *mut f64,
        v2lapltau: *mut f64,
        v2tau2: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_fxc(p: *const xc_func_type, np: size_t, rho: *const f64, v2rho2: *mut f64);
}
extern "C" {
    pub fn xc_gga_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2sigma2: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_fxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2rholapl: *mut f64,
        v2rhotau: *mut f64,
        v2sigma2: *mut f64,
        v2sigmalapl: *mut f64,
        v2sigmatau: *mut f64,
        v2lapl2: *mut f64,
        v2lapltau: *mut f64,
        v2tau2: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_exc_vxc_fxc_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        v2rho2: *mut f64,
        v3rho3: *mut f64,
    );
}
extern "C" {
    pub fn xc_gga_exc_vxc_fxc_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2sigma2: *mut f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rhosigma2: *mut f64,
        v3sigma3: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_exc_vxc_fxc_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        zk: *mut f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        vlapl: *mut f64,
        vtau: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2rholapl: *mut f64,
        v2rhotau: *mut f64,
        v2sigma2: *mut f64,
        v2sigmalapl: *mut f64,
        v2sigmatau: *mut f64,
        v2lapl2: *mut f64,
        v2lapltau: *mut f64,
        v2tau2: *mut f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rho2lapl: *mut f64,
        v3rho2tau: *mut f64,
        v3rhosigma2: *mut f64,
        v3rhosigmalapl: *mut f64,
        v3rhosigmatau: *mut f64,
        v3rholapl2: *mut f64,
        v3rholapltau: *mut f64,
        v3rhotau2: *mut f64,
        v3sigma3: *mut f64,
        v3sigma2lapl: *mut f64,
        v3sigma2tau: *mut f64,
        v3sigmalapl2: *mut f64,
        v3sigmalapltau: *mut f64,
        v3sigmatau2: *mut f64,
        v3lapl3: *mut f64,
        v3lapl2tau: *mut f64,
        v3lapltau2: *mut f64,
        v3tau3: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_vxc_fxc_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        vrho: *mut f64,
        v2rho2: *mut f64,
        v3rho3: *mut f64,
    );
}
extern "C" {
    pub fn xc_gga_vxc_fxc_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2sigma2: *mut f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rhosigma2: *mut f64,
        v3sigma3: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_vxc_fxc_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        vrho: *mut f64,
        vsigma: *mut f64,
        vlapl: *mut f64,
        vtau: *mut f64,
        v2rho2: *mut f64,
        v2rhosigma: *mut f64,
        v2rholapl: *mut f64,
        v2rhotau: *mut f64,
        v2sigma2: *mut f64,
        v2sigmalapl: *mut f64,
        v2sigmatau: *mut f64,
        v2lapl2: *mut f64,
        v2lapltau: *mut f64,
        v2tau2: *mut f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rho2lapl: *mut f64,
        v3rho2tau: *mut f64,
        v3rhosigma2: *mut f64,
        v3rhosigmalapl: *mut f64,
        v3rhosigmatau: *mut f64,
        v3rholapl2: *mut f64,
        v3rholapltau: *mut f64,
        v3rhotau2: *mut f64,
        v3sigma3: *mut f64,
        v3sigma2lapl: *mut f64,
        v3sigma2tau: *mut f64,
        v3sigmalapl2: *mut f64,
        v3sigmalapltau: *mut f64,
        v3sigmatau2: *mut f64,
        v3lapl3: *mut f64,
        v3lapl2tau: *mut f64,
        v3lapltau2: *mut f64,
        v3tau3: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_kxc(p: *const xc_func_type, np: size_t, rho: *const f64, v3rho3: *mut f64);
}
extern "C" {
    pub fn xc_gga_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rhosigma2: *mut f64,
        v3sigma3: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_kxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        v3rho3: *mut f64,
        v3rho2sigma: *mut f64,
        v3rho2lapl: *mut f64,
        v3rho2tau: *mut f64,
        v3rhosigma2: *mut f64,
        v3rhosigmalapl: *mut f64,
        v3rhosigmatau: *mut f64,
        v3rholapl2: *mut f64,
        v3rholapltau: *mut f64,
        v3rhotau2: *mut f64,
        v3sigma3: *mut f64,
        v3sigma2lapl: *mut f64,
        v3sigma2tau: *mut f64,
        v3sigmalapl2: *mut f64,
        v3sigmalapltau: *mut f64,
        v3sigmatau2: *mut f64,
        v3lapl3: *mut f64,
        v3lapl2tau: *mut f64,
        v3lapltau2: *mut f64,
        v3tau3: *mut f64,
    );
}
extern "C" {
    pub fn xc_lda_lxc(p: *const xc_func_type, np: size_t, rho: *const f64, v4rho4: *mut f64);
}
extern "C" {
    pub fn xc_gga_lxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        v4rho4: *mut f64,
        v4rho3sigma: *mut f64,
        v4rho2sigma2: *mut f64,
        v4rhosigma3: *mut f64,
        v4sigma4: *mut f64,
    );
}
extern "C" {
    pub fn xc_mgga_lxc(
        p: *const xc_func_type,
        np: size_t,
        rho: *const f64,
        sigma: *const f64,
        lapl: *const f64,
        tau: *const f64,
        v4rho4: *mut f64,
        v4rho3sigma: *mut f64,
        v4rho3lapl: *mut f64,
        v4rho3tau: *mut f64,
        v4rho2sigma2: *mut f64,
        v4rho2sigmalapl: *mut f64,
        v4rho2sigmatau: *mut f64,
        v4rho2lapl2: *mut f64,
        v4rho2lapltau: *mut f64,
        v4rho2tau2: *mut f64,
        v4rhosigma3: *mut f64,
        v4rhosigma2lapl: *mut f64,
        v4rhosigma2tau: *mut f64,
        v4rhosigmalapl2: *mut f64,
        v4rhosigmalapltau: *mut f64,
        v4rhosigmatau2: *mut f64,
        v4rholapl3: *mut f64,
        v4rholapl2tau: *mut f64,
        v4rholapltau2: *mut f64,
        v4rhotau3: *mut f64,
        v4sigma4: *mut f64,
        v4sigma3lapl: *mut f64,
        v4sigma3tau: *mut f64,
        v4sigma2lapl2: *mut f64,
        v4sigma2lapltau: *mut f64,
        v4sigma2tau2: *mut f64,
        v4sigmalapl3: *mut f64,
        v4sigmalapl2tau: *mut f64,
        v4sigmalapltau2: *mut f64,
        v4sigmatau3: *mut f64,
        v4lapl4: *mut f64,
        v4lapl3tau: *mut f64,
        v4lapl2tau2: *mut f64,
        v4lapltau3: *mut f64,
        v4tau4: *mut f64,
    );
}
extern "C" {
    pub fn xc_gga_ak13_get_asymptotic(homo: f64) -> f64;
}
extern "C" {
    pub fn xc_gga_ak13_pars_get_asymptotic(homo: f64, ext_params: *const f64) -> f64;
}
extern "C" {
    pub fn xc_hyb_exx_coef(p: *const xc_func_type) -> f64;
}
extern "C" {
    pub fn xc_hyb_cam_coef(
        p: *const xc_func_type,
        omega: *mut f64,
        alpha: *mut f64,
        beta: *mut f64,
    );
}
extern "C" {
    pub fn xc_nlc_coef(p: *const xc_func_type, nlc_b: *mut f64, nlc_C: *mut f64);
}
